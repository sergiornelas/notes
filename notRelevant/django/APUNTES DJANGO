VIRTUAL ENVIRONMENT
	keep packages and dependencies isolated inside of your project rather than a global 		scope. This helps in not changing your existing environments
		>> python3 -m venv /path/to/new/virtual/environment

pip = package installer for python. You can use pip to install packages from the Python Package Index 		and other indexes.
	
pip freeze
	shows the packages and dependencies that are installed in a global scope on the system.
	If you are in a new environment recién creado, if you execute this line wouldn't appear nada.

Create environment (you are not in the environment yet)
	python3.8 -m <foldername> <./ubication/of/the/folder>
		python3.8 -m venv ./venv

Activate the environment
	source ./<foldername>/bin/activate
		python 3 will be default, try it: python3 --version
Leave the environment
	deactivate

----------------------------------------------------------------------------------
INSTALL DJANGO (once you create an environment)

pip install django
	install globaly in your system, or in your enviroment

django-admin help
	show the commands you can use with admin

-Django has one main project (real state) and apps (listings, realtors)

django-admin startproject <project name>
	comenzar un projecto de django. you overall aplication. Puedes tener muchas
	apps en tu aplicación.

----------------------------------------------------------------------------------
GIT

git init
create a .gitignore, paste this:
	*.log
	*.pot
	*.pyc
	__pycache__/
	local_settings.py
	db.sqlite3
	db.sqlite3-journal
	media

	#added
	venv 
git add . && git commit -m 'Initial commit'

----------------------------------------------------------------------------------
DJANGO COMMANDS

Create an app
	>> python manage.py startapp <appname> (creates a folder with default files)

Manual de ayuda
	>> python manage.py help

pip install pipenv
	set up a virtual environment for each project you create
	any packages you install including django will install in the created virtual
	environment rather than the global system.
python -m django --version
	check django version
pipenv shell
	abrir python shell(?)
pipenv install django	
	instalar django en virtual environment
python manage.py runserver
	run local host default 8000. You have to be into <project> file (dentro esta
	el manage.py). You can specify a port:
		 python manage.py runserver 8081
python manage.py migrate
	migrate. this command se corre una vez ya corriste <python manage.py runserver>
	Se crea las tablas y la base de datos

pipenv install autopep8 --dev
	instalar el autopep, una vez se ha creado las tablas (clases) de la base de datos
python manage.py makemigrations polls
	se crea una carpeta 'migrations' la cual tiene dentro un file 0001_initial.py
	donde le dice a la base de datos que crear (toma en cuenta las classes creadas
	en models.py. Aún no se crea la base de datos, se crea el archivo.
python manage.py migrate
	inicializa la base de datos del archivo 0001_initial.py
python manage.py shell
	manage data from modules through shell
	>> from polls.models import Question,Choice
	...
python manage.py createsuperuser
	create admin or super user
xxxxxxxxxxxxxxxxxxxxx
core files (created when you create a project){
	manage.py
		file that runs the server, create migration, etc
	settings.py
		file that put links like base directory, secrey key for production, installed apps,
		middlewares, templates, databases, password validators, language code, time zone.
	urls.py
	wsgi.py
		serving our application, you don't need to touch that at all
}

----------------------------------------------------------------------------------
FILES

manage.py
	You are never touch this code. Basically the tool you will use instead of django admin.
	It has the functions that django admin help has (migrations, run server...)
		to run the local server:
			python manage.py runserver
db.sqlite3
	Its where the data is stored if you use sqllite database
	its nice for prototyping, testing, small web.

__pycache__
	You don't have to touch them.
	Files that are generated when you run your server.

__init__.py
	usually never touch it
	you don't need it after version 3.3, its function is use files as packages.

settings.py
	one of the most important
	import os module (operating system)
	secret key: if you want to deploy you don't want this key to be shared!
	Debug: useful error messages. True if you are in development. False if you want in production.
	Allowed_hosts: put in a list host domains this website can serve, digitalocean goes here.
	installed_apps: apps you want to use in your project (admin, messages, etc..)
	middleware: middlewares
	templates: what are used to generate html for application, display to the user
	wsgi_application: path of the django built in server use, tiene que ver con el file
		wsgi.py
	databases: database parameters. You can change to postgress or mysql
	auth_passwords_validators: setting where you set type of rules for passwords
	static_url: the path that's gonna use for static files like css, js, images.

urls.py
	routing file. Collection of all your apps, urls, links.
wsgi.py
	dificult to understand. webserver gate interface. It's a specification that describes
	how webserver comunicates with web applications, and how web applicationns can be changed
	to get to process one request. It's important for hosting your website.
	
----------------------------------------------------------------------------------
APP FILES
 	admin.py
		if you want add things to the admin area
	models.py
		database stuff
	views.py
		render the template, connect view with urls.
		you can create methods, and link urls with those methods.
	apps.py	
		show the class of the config.
	tests.py
		if you want to run it in test
	
	
----------------------------------------------------------------------------------
PARA LA CASA:
	btre_resources
	btre_project
		python3.8 -m venv ./venv #creates venv folder
		source ./venv/bin/activate
		python --version (debe ser 3.8.1)
		pip install django
		django-admin startproject btre .
		install linter pylint
			le das que si.

#capítulo 7 pagination, order & filter
#ya realizamos el single listing page
...
