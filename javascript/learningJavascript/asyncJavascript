HOISTING
	Hoisting is JavaScript default behavior of moving declarations to the top
	of the current scope (to the top of the current script or the current function).
	
-------------
➡️ console.log('Starting!);
➡️ setTimeout(() => {
		console.log('Timer completed!');
	}, 10);
➡️ console.log('Finished!');
⬅️ Starting!, Finished!, Timer completed!

How does JavaScript handle asynchronous code execution?
	Its single-threaded but offloads longer-taking tasks (e.g. timers) to the browser (which
	uses multiple threads).

The browser communicates with JS via the Event Loop and the Message Queue to let
it know once a longer-taking task finished.

-------------
PROMISE
	Promise takes a function as an argument. And this function takes two functions as parameters.
								fn
							fn1       fn2
	const promise = new Promise((resolve, reject) => {
		setTimeout(() => {
			resolve('Done!');
		}, 5000);
	});

	Promises vienen con el .then method, el cual interactúa con el resultado 'resolve'.
	promise.then(data => console.log(data));
	// << Done!

	If the Promise is in PENDING state, neither then() nor catch() executes at this moment.

	.then and .catch always return a new Promise.

.then KEYWORD
	It has two arguments:
		1) Function that handles Promise RESOLVED object.
		2) Function that handles Promise REJECTED object.
		   Handles the rejections produced ANYWHERE in the UPPER promise chain.
		   (But most of the time this is handled by catch, does the exact same thing).

		Example:
		functionThatReturnsPromise()
		    .then((data) => {	// 1
			   console.log(data);
		    }, err => {		// 2
			   console.log(err);
		    });
		    
.catch KEYWORD
	It has one argument:
		1) Function that handles Promise REJECTED object.
		
	The positioning of the catch block MATTER:
		- The catch method does not cancel the ENTIRE promise chain (.then().then().then()), only if
		you have the catch block at the END of all .then blocks.
						❌️
			.then(✅️).then(❌️).then(❌️).then(❌️)catch(✖️)
		
		- The .then blocks THEREAFTER WILL CONTINUE TO EXECUTE:
						❌️    
			.then(✅️).then(❌️).catch(✖️).then(✅️).then(✅️)
			That happens because catch sets the Promise back to 'pending'

CHAINING PROMISES
	functionThatReturnsPromise()
		.then(data => {
			console.log(data);
    			return functionThatReturnsPromise2(); *
		});
	
	The first functionThatReturnsPromise will be resolved, then by using another promise inside
	of .then function*, we SET IT BACK TO PENDING the first promise.

	If one of the promise fails, all the promise chain will be rejected:
			          ❌️  
		.then(✅️).then(❌️).then((❌️).then((❌️)

	How .then pass resolved/rejected data throughout the promise chain:
		functionThatReturnsPromise()
			.then(data => {	//This data refers to the functionThatReturnsPromise resolved object.
				console.log(data);
			})
			.then(data2 => {	//This data2 refers to the previous .then resolved object.
				console.log(data2);
			})
			.catch(data3 => {	//This data3 refers to the last .then rejected object.
				console.log(data3);
			})

FINALLY (clean up work).
	 - Only if there are no more then() blocks left, it enters a new, final mode: SETTLED.
	 - Once SETTLED, you can use a special block: finally() to do final cleanup work.
	 - finally() is reached no matter if you resolved or rejected before.
	 - finally() will NOT return a new promise.
	 - You do not have to add a finally() block.

	functionThatReturnsPromise()
		.then(firstResult => {
			return 'done with first promise';
		})
		.catch(err => {
		   // would handle any errors thrown before
		   // implicitly returns a new promise - just like then()
		})
		.finally(() => {
		   // the promise is settled now - finally() will NOT return a new promise!
		   // you can do final cleanup work here
		});

ASYNC/AWAIT
	Just for write shorter code. Still uses Promises behind.
	More consice way to write/handle Promises. Does not change the JavaScript behaviour.
	Automatically returns Promise (no return keyword needed).
	Only available in functions.
	Wraps all function content into one Promise.

	AWAIT
		Can only be used in functions which are marked with async.
		Wait for the Promise to resolve or fail and the next line thereafter will only execute.
		We add this keyword in front of any Promise.
		Similar to .then block.
	
	Example:
	async function trackUserHandler(){
		const x = await functionPromise();
		const y = await anotherFunctionPromise();
		//automatically returns resolved/rejected Promise.
	}

	❌️ HANDLING ERRORS
	We use try{} catch {} for managing errors with Async statements.
	try {
		const x = await functionPromise();	//if this fails, it is not going to execute next Promise y.
		const y = await anotherFunctionPromise();
	} catch (error) {
		console.log(error);
	}

	🙅‍♂️️ ASYNC/AWAIT VS RAW PROMISES	
	A downside (bad feature) of using async/await is that you can NOT run tasks SIMULTANEOUSLY
	inside of the same function:
	async function functionPromise() {
		try {
			x = await anotherFunctionPromise();
			y = await anotherFunctionPromise2();
		} catch (error) {
			console.log(error);
		}
		console.log('hi!');	//This will not execute first (JS delegate to browser API nature), this
						//will be execute THEREAFTER the try/catch upper statements.
						//It's like we have added console.log inside an .then() block.
	}
		Summary:
		Use async functions if you are going to execute this:
			1) then(()=>{})
			2) then(()=>{})
			3) catch(){}
		Do not use them if you are looking for execute something like this:		
			2) then(()=>{})
			3) catch(){}
			1) console.log(...)	//this is supposed to execute first (Javascript nature).

	Another downside is that you need to implement this into a function.


