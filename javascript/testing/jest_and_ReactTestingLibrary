TESTING IS MORE AN ART THAN A SCIENCE.

git shortcut
	git commit -am "Updated"

⭐️ LINKS
	https://testing-library.com/docs/queries/about/#priority
	https://testing-library.com/docs/react-testing-library/cheatsheet/
	https://www.w3.org/TR/wai-aria/#role_definitions
	https://github.com/testing-library/jest-dom
	https://github.com/bonnie/udemy-TESTING-LIBRARY/tree/master/code-quiz
	https://testing-library.com/docs/ecosystem-user-event

⭐️ JEST
	Test runner that:
		- Finds tests.
		- Runs tests.
		- Determines whether tests pass or fail.

	There is more tests runners such as Moka or Jasmine.

	Comes with create-react-app.

	➡️ npm test
		runs an npm script that runs Jest in watch mode.

	Watch mode
		- Is a way that you can run just so that it will watch for any changes in files since the last commit.
		- Only run tests that are related to files that have changed since the last commit. No changes? No tests.

	How does Jest Work?
		Global test method has two arguments:
			- string description.
			- test function.

		Test fails if error is thrown when running function.
			- assertion throw errors when expectation fails.

		No error -> tests pass

⭐️ REACT TESTING LIBRARY
	- Uses { render and screen } methods.
	- Creates virtual DOM for testing
		and utilities for interacting with DOM
	- Allows to testing without a browser!

	Needs a test runner (find tests, run them, make assertions) in this case Jest.
	It drives you towards best practices when it comes to react testing.

⭐️ TYPES OF TESTS
	- Unit tests ⭕️
		- Tests one unit of code in isolation (a function or a react component).
		- You don't want to test any interactions of this unit with any other units of code.

	- Integration tests ⭕️ ↔️ ⭕️
		- How multiple units work together.

	- Functional tests ⭕️ ➡️ ⭕️ ↔️ ⭕️ 		 ⚛️ REACT TESTING LIBRARY use this!
		- Tests a particular function of software (enter data in form and click submit).
		- You are not testing your code, you are testing BEHAVIOUR.
		- React Testing Library encourages testing how users use your software and not testing your internal code implementation.
		- React Testing Library believes that the advantages of functional testing overpasses the disadvantages.

	- Acceptance / End-to-end (E2E) Tests.
		- Use actual browser and server (Cypress, Selenium).

⭐️ UNIT TESTING VS FUNCTIONAL TESTING
	Unit Testing:
		- Isolated, you have to create fictional mock dependencies.
		- With this you are often testing how your software is written.
		- If you change how it's written, your tests might fail, even the behaviour hasn't changed.

		👍️ Very easy to pinpoint failures.
		👎️Further from how users interact with software. You could have tests passing even users interacting with your software have
		      failures, or viceversa, your tests fails even though users would have no problem interacting with your software.
		👎️ More likely to break with refactoring (changing how your software is written without changing the behaviour).
	
	Functional Testing:
		Include all relevant units, test behaviour.
		
		👍️ Close to how users interact with software.
		👍️ Robuste tests. Even you refactor how your code is written, as long as the behaviour stays the same, your tests should still pass.
		👎️ More difficult to debug failing tests. It's not obvious which parts of your code are causing the tests to fail.

⭐️ JEST-DOM
	Comes with create-react-app
	src/setupTests.js imports it before each test, makes matchers available.

⭐️ TDD (Test-Driven Development)
	1) Write tests before writing code. Tests fail before code is written.
	2) Write code to make the tests pass.
	It's also called "red-green" testing.

	How to implement:
		1) ➡️ Create a react component. This component don't do anything, is just an empty function.
		2) ➡️ Write the test
		3) ❌️ You expect that the tests fail, because your function doesn't actually do anything.
		4) ➡️ Write code
		5) ✔️Tests pass!

	Why TDD?
		Makes a huge difference in how it feels to write tests.
			It becomes a part of the coding process itself, and not just a "chore" (routine task) to do at the end.
		More efficient		
			Re-run tests "for free" after changes.

⭐️ WHICH QUERY SHOULD I USE.
	https://testing-library.com/docs/queries/about/#priority

	GET
	Expect element to be in DOM.
	Priority order:
		1) Queries Accessible to Everyone 
			i) getByRole
				- Checa los roles posibles: https://www.w3.org/TR/wai-aria/#role_definitions
				 - If it's a link use getByRole: screen.getByRole('link', { name: /learn react/i });
				- Asegurate de usar este lo más que puedas para asegurarte que los elementos son accesibles a la pantalla.
				- <div role="article" ></div> Algunos elementos tienen roles predefinidos: button, anchor tag tiene role=link
				
			ii) getByLabelText
			...

	QUERY
	Expect element NOT to be in DOM

	FIND
	Expect element to appear ASYNC

⭐️ IMPORT
import { render, screen } from '@testing-library/react'

⭐️ DECLARATIVE QUERIES
	{ render }
		Create virtual DOM for argument JSX:
			➡️ render(<App />);

	{ screen }
		Access virtual DOM created by { render } :
			➡️ const linkElement = screen.getByText(/learn react/i);

	{ fireEvent }
		Interact with the virtual DOM.
			➡️ fireEvent.click(colorButton);

⭐️ ASSERTION (a confident and forceful statement of fact or belief).
	EXPECT(ARGUMENT).MATCHER(MATCHER_ARGUMENT).
		➡️ expect(linkElement).toBeInTheDocument();

	Causes test to succed or fail.

	✡️ expect()
		Jest global, starts the assertion.
		Inside parenthesis (SUBJECT) is what Jest will examine to see if it meets our expectations.

⭐️ UNIT TESTING FUNCTIONS
	Functions separate from components used by several components or have complex logic.
	Unit test if:
		- Complex logic difficult to test via functional tests.
		- Too many edge cases (espera un int, pero puede recibir un string, un array, etc) .
		- When you want to be able to determine what caused your functional tests to fail.
	
	Issue with functional tests:
		- Sometimes they are very high-level, which makes them resistant to failing when you've refactored the code (when you've
		   changed how the code is implemented but not change the behaviour). That's great, it means your tests are resilient.
		- Difficult to diagnose.

⭐️ ESLINT and PRETTIER
	ESLint
		- Popular linter for JavaScript (Linter: analyzes static text and marks syntax that breaks rules).
														       static refers to analyze code as written, not what happens when code is run.
		- Linting keeps code style consistent, especially for multiple engineers projects.
		- Also catches errors in code (using variable before defining, importing from nonexisting file, etc...)

	Prettier
		- Formatter, automatically format code (indents, spacing, spaces around curly braces...)
		- Linters address format and style. Example: preferred assertion method:
			expect (checkbox).toHaveAttribute(checked);		->		expect(checkbox).toBeChecked();
	
	➡️ npm install eslint-plugin-testing-library eslint-plugin-jest-dom

⭐️ USER EVENT
	➡️ npm install @testing-library/user-event @testing-library/dom
	...
	➡️ import userEvent from '@testing-library/user-event';
	More closely resemble how the user would interact.
	In general, it's recommended to use user event over fire event, provides mor advanced simulation.

⭐️ ACT WARNING
	⬅️ test not wrapped in act (...) warning
	How to fix this:
		Determine what is happening asynchronously that's causing the component to update after the test is finished and then
		account for that in your tests.

⭐️ MOCK SERVICE WORKER SETUP
	Mimics response from server.
	➡️ npm install msw
	1) Create handlers
		Functions that will determine what is returned for any particular URL and route.
	2) Create server
		use that handler to send the response
	3) update setupTests to listen for requests

-------------------
EXTRA
⭐️ También puedes hacer queries utilizando el querySelector directamente del DOM
	➡️ expect(document.querySelector('h1')).toBeInTheDocument();

