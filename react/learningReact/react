Min	Porcentaje TOTAL
2430 -> 100%

Pienso que tomaré hasta la sección 19 (Improving our Burger Project), además se agregará la sección 26, 27 y 28.
Min	 Porcentaje
1991 -> 100%
1172 -> 58.86%

(no he contado minutos desde que empecé la sección 26)
{Avanzado al video 433: Passing... de la sección 26: React Hooks}	("hasta" fue el último video palomeado)

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
ctrl + shift + f = buscar keywords en todo el proyecto!
ctrl + shift + g = cuando tienes un repositorio en github, puedes ver las diferencias del código aqui
ctrl + x = borrar línea
ctrl + d = siguiente ocurrencia.
rafce = create arrow functional component
rce = create class component
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Why React?
- UI State becomes difficult to handle with Vanilla JavaScript.
- Focus on Business Logic, not on preventing your App from exploding.
- Huge Ecosystem, active community, high performance.

BABEL
- Babel en la practica nos permite utilizar etiquetas html directamente dentro de JS (aunque realmente no lo interpreta como html syntax).
- Es una herramienta que nos permite transformar código JS de última generación (o con funcionalidades extras) a JS que cualquier navegador o versión de Node.js entienda.
- Al crear componentes, los navegadores y Node.js no entienden JSX, así que para que funcionen nuestro componentes necesitamos transformar nuestro código, para eso se usa Babel.

⭐️ SETTING UPP REACT APLICATION (with all elemental packages needed (react, reactDOM, JSX, babel...)
	https://github.com/facebook/create-react-app

⭐️ JSX
	- JSX is NOT HTML but it looks a lot like it. Differences can be seen when looking closely though (for example className in JSX vs class 
	in "normal HTML").
	- JSX is just syntactic sugar for JavaScript, allowing you to write HTMLish code instead of NESTED React.createElement(...) calls.
	- It must have only ONE PARENT ELEMENT:
	- Cada vez que te refieras a alguna variable o propiedad dentro de las etiquetas JSX, utilizarás CORCHETES {}
	- Viene de la librería react
		➡️ import React from 'react';

⭐️ ReactDOM
	Object
	✡️ReactDOM.render()
		+ Render something to the screen.
		+ Only available on CLASS-based components.
		+ This method (its a method from Component)  allows us to RENDER a JAVASCRIPT FUNCTION as a COMPONENT to REAL DOM.
			1st parameter: Component.
			2nd parameter: Place to render 1st.
				➡️ ReactDOM.render(<Aplicacion />, document.getElementById("root"));
		Si lo que buscas es renderear MULTIPLES COMPONENTES:
			➡️ ReactDOM.render(<div><UserInput/><UserOutput/></div>, document.getElementById("root"));
			Debes ENCERRARLO EN UN MISMO PARENT ELEMENT.
		...
		De hecho no renderea directamente al DOM, más bien es una sugestión sobre que HTML debe ser en el final, es por eso que
		utilizamos shouldComponentUpdate() para prevenir innecesarios render calls.

⭐️ React from 'react' library
	✡️React.createElement (you don't use this):		//THIS IS WHAT JSX COMPILES!
		It's a method at least three arguments:
		1) Element we want to render to the DOM.
		2) Configuration or CSS style.
		3) Any amount of children (could be nested inside)
		➡️ return React.createElement('div', {className: 'App'}, React.createElement('h1', null, 'Does this work now?'))

⭐️ COMPONENT
	- It HAS TO RETURN some HTML CODE (JSX) which can be rendered to the DOM to the screen.

	- Its' a CLASS from the 'react' library:
		+ Necesitas importar antes la librería:
		➡️ import React from "react"

	- In Class-based components you only have ONE STATE PROPERTY, setState automatically merges changes with the old state.
	- In Functional components you can have multiple useState calls.
	Si el State cambia, automaticamente ACTUALIZARÁ LOS VALORES (le dice a React que vuelva a leer el DOM) !!
			
	- DYNAMIC component content { }
		+ Tienes que encerrar el código en CURLY BRACES:
			➡️ return <p>I'm a Person and I am {Math.floor(Math.random() * 30)} years old!</p>;
		+ No puedes definir Classes dentro {}
		+ Puedes definir ONE LINE EXPRESSIONS INSIDE { }

	En functional components props es un argumento de una función,mientras que en class-based es una PALABRA RESERVADA

	- CHILDREN: Refering ALL CHILD elements between the opening and closing tab: <> child </>
		➡️ ...
		➡️ <p>{props.children}</p>

	- IF CONDITIONALS RENDERING
		➡️ state={showInfo: false}
			//Aqui en este comentario va una funcion que cambia el state showInfo cuando se da click a un botón
			render(){
				return(
					{this.state.showInfo ? (		//Check if a value is truthy using Ternary operation
						<div>Show info! </div>
					) : null}
				)
			}
		
		FORMA MÁS CLARA Y RECOMENDADA:
		➡️ state={showInfo: false}
			//Aqui en este comentario va una funcion que cambia el state showInfo cuando se da click a un botón
			render(){
				let persons = null;
				if(this.state.showPersons){
					persons=(<div>Hola!</div>)
				return(
					{persons}
				)

	- KEY, AVOIDING RE-RENDERING SAME INFO.
		+ Allows React to KEEP TRACK OF THE INDIVIDUAL JSX ELEMENTS to find out which elements changed and which didn't, and only
		RENDERS ELEMENTS THAT CHANGED.
		+ Important when RENDERING LIST OF DATA.
		+ React expects to find that key on the element which you render inside a list (for example when mapping (MAP()) array into a JSX
		    ELEMENTS.
		➡️ return (
		              <Person
		                name={person.name}
        			age={person.age}
		                key={person.id}	//<- THIS, is unique, you can't change the "key" keyword.
		              />
	               );

	- HIGH ORDER COMPONENT
		+ Component wrapping another component, injecting some functionality.

	ERROR BOUNDARY
	+ Nice tool for production to show custom error messages and not make the whole application fail.
	+ The problematic component will be replaced by your costume error message.
	Error boundary component it's usefull for handling any errors that inner component may throw
		➡️ <ErrorBoundary key={person.id}><Person ... /></ErrorBoundary>	//KEY always has to be in the outer component.
		Use Error boundary in a Component that may fail, not in the whole application.
	
⭐️ REACT EVENTS
	✡️ onChange
		Detects when the value of an INPUT element CHANGES.
		Realiza lo mismo que oninput de JS (el efecto es inmediato).
	
	✡️ onClick
		Se activa cuando se da click (lo mismo que en JS).

	✡️ onSubmit
		Para los formularios.
		<form onSubmit={this.orderHandler}>
		...

	✡️ onDoubleClick
		Se actiiva cuando se da doble click.

	React events: { (e) => e.target.value }, NO funcionan igual que con JS, (recordemos que dentro de render(<JSX/>) es solo synthatical
	sugar para escribir HTML y pseudoJavaScript dentro), lo que hace React con esos events es que REUSA ESOS EVENTOS del EVENTO PA-
	SADO (SUENA CONFUSO, LO SÉ). La solución a esto es almacenar el evento en una VARIABLE, para que ahora tome en cuenta
	el nuevo evento ejecutado durante el nuevo rendereado:
		En lugar de hacer esto (sale error)										Haces esto:
		➡️ onChange={(event) =>												➡️ onChange={(event) =>
																							const newTitle = event.target.value;
				setState((prevInputState) => ({											setState((prevInputState) => ({
					title: event.target.value,												title: newTitle
					...																			...
	Esta particularidad existe ya que gracias a ello es posible:
	➡️ onChange={(event) => {					User inputs: a > r > b > o > l
	               setState(event.target.value);			state="arbol"	//Los events dentro del JSX REUSAN EVENTOS PASADOS, por eso se concat-
		}																//ena cada carácter, en lugar de reemplazar el valor.

⭐️ GOOD PROJECT STRUCTURE
	- It's a good practice to CREATE AS MANY STATELESS COMPONENTS as possible. Easier to mantain, and avoids spaghetti code.
	- Components that manage state, shouldn't be involved with the UI render too much. Making that split makes you keep your application 		   MANAGEABLE. Because you have a predictable flow of data, you know where your state changes, and other components will be
	   there to render a nice UI.
	- The render method should be rather lean and contain not too much jsx.

⭐️ CSS MODULES (recomended!)
	Bc you run regular CSS files, you can run media queries as normal!!
	El archivo que tiene las clases CSS que deseas "convertir" a metodos JS deben estar en un file con esta nomenclatura:
		App.module.css
	
	Example:
		In Post.css File
			.Post {
			    color: red;
			}
		In Post Component File
			import classes from './Post.css';
			 
			const post = () => (
			    <div className={classes.Post}>...</div>
			);
		Here, classes.Post  refers to an automatically generated Post  property on the imported "classes" object.
		That property will in the end simply hold a value like Post__Post__ah5_1 .
		So your .Post  class was automatically transformed to a different class (Post__Post__ah5_1 ) which is unique across the application.

	DYNAMIC STYLING
		➡️ import X from "./App.module.css";		
		➡️ let btnClass = [X.Button];				//Toma las propiedades de .Button y .Button:hover. Las subclases (.Button.Red) NO.
			... se realiza cierta condición, sale true
			➡️ btnClass.push(X.Red); //se agregan las subclases .Button.Red y .Button.Red:hover
		➡️ return (
				<button className={btnClass.join(' ')}>	//CSS properties inside each array index transforms into a SINGLE STRING.
			)

⭐️ VIRTUAL DOM
	- React has a Virtual DOM called React DOM which is the intermediary between React library and the browser DOM. React DOM uses 
	   the ReactDOM.render()
	- React basically keeps two copies of the DOM. It has the old virtual DOM and then the re-rendered one (when render() it's called).
	- Faster than "real" DOM. It's  a DOM representation in Javascript.
	- React compares the old virtual DOM to the new one and it checks if there are any differences. If it can detect differences, it reaches
	   out to the real DOM and updates it. It doesn't re-render the real DOM entirely, it only changes it in the places where differences 
	   were detected.
		For example if a button text changed, it will only update that text and not re-render the whole button.
	- If no difference  were found, then it doesn't touch the real DOM. Render did execute, the comparison was made and that
	   is why shouldComponentUpgrade might make sense to prevent this.
	
⭐️ RENDERING MULTIPLE PARENT JSX ELEMENTS IN RETURN
	You have to store the elements inside an array:
		➡️ return [
				<p>Sergio key="i1"</p>,
				<p>Lopez key="i2"</p>,
				<p>Ornelas key="i3"</p>,
			]
	You have to put an unique KEY into each element.

⭐️ CHILDREN PROPERTY FOR WRAPPING.
	Special property that simply outputs whatever gets entered between the opening and closing tag.
	It's the ENTIRE CONTENT between opening and closing tag.
	Metes todo el contenido JSX EN UN COMPONENTE APARTE PARA RENDEREARLO EN OTRO FILE.
		➡️ const aux = props => props.children;	//children it's a React reserved keyword
		➡️ export default aux;
		--------
		➡️ ...
		➡️ render() {
			    console.log("[Person.js] rendering...");
			    return (
			      <Aux>
					<p>Sergio key="i1"</p>,		//Ahora no tendremos problema con tener más de 1 parent element.
					<p>Lopez key="i2"</p>,
					<p>Ornelas key="i3"</p>
			    </Aux>
			);
		    }

⭐️ CONTEXT (Avoid prop chain redundancy).
	✡️createContext()
	✡️ Provider
	CREATE CONTEXT
	- When you need certain state in multiple components and you DON'T WANT to PASS that STATE ACROSS MULTIPLE COMPONENTS,
	   just to get it from component A at the top to component D at the very bottom, when the components B and C in between don't
	   really care about it.
		----------------------------------------------------------------- auth-context.js
		➡️ const authContext = React.createContext( { 
				  authenticated: false,
			 } );
			export default authContext;

	SETTING UP THE CONTEXT
	- It's a JS object that can be passed between React components without using props (just behind the scenes).
	- It should wrap all the parts of your application that need access to this context:
		----------------------------------------------------------------- App.js
		➡️ import AuthContext from "../context/auth-context";
		       ...
		       return(
				<AuthContext.Provider value={{authenticated: this.state.authenticated}}>	//HERE
					  {this.state.showCockpit ? (
						    <Cockpit
						      title={this.props.appTitle}
						      showPersons={this.state.showPersons}
						      login={this.loginHandler}
						    />
					  ) : null}
					  {persons}
				</AuthContext.Provider>
          		)

	- The default value will apply when you don't set any other value (authenticated: false).
	- This will not cause a re-render cycle.

	CONSUME CONTEXT
		You use the useContext hook (Check reactHooks file)

⭐️ FRAGMENT
	En lugar de usar children property para wrapping jsx elements, usa simplemente FRAGMENT:
		➡️ import React, { Fragment } from "react";
		➡️ ...
		➡️ return (
			      <Fragment>
					<p>Sergio key="i1"</p>
					<p>Lopez key="i2"</p>
			      </Fragment>
			);
	Under the hood does exactly the same thing as aux components does (children property).

⭐️ HIGH ORDER COMPONENTS
	Functional component where won't manage any state with hooks.
	Super simple:
		➡️ const aux = (props) => props.children;
		➡️ export default aux;
		-----------
		➡️ import Aux from '../../hoc/Aux'
		➡️ const layout = (props) => {
			    <Aux>
					<p>Sergio</p>
					<p>Lopez</p>
			    </Aux>
			};

	They add something extra to the component: styles, html code, or some extra JS logic.
	Another example for a HOC that you could create would be a component that SETS UP A DIV THAT CONTAINS A CLASS OR SETS
	UP A CLASS.
		➡️ <div className={classes.App}>		//Example

	Its sets up a class on a div that wraps the component
		➡️ import React from "react";
		➡️ const withClass = (props) => {
				return(
			  		<div className={props.classes}>{props.children}</div>;
				)
			};
		➡️ export default withClass;
		------------
		➡️ import classes from "./App.module.css";
		➡️ ...
		➡️ return (
			      <WithClass classes={classes.App}>
					<p>Sergio</p>
					<p>Lopez </p>
				</WithClass>
			);

	It's a convention to name high order components with a With at the beginning: WithClass.js

	ANOTHER WAY TO CREATE HOC:
		Using a COMPONENT FUNCTION INSIDE A REGULAR FUNCTION:
		---------------	withClass.js
		➡️ const withClass = (WrappedComponent, className) => {
				  return props => ( 	//functional component
				 	   <div className={className}>
						      <WrappedComponent/>
					    </div>
				  ); 
			};
		➡️ export default withClass;
		---------------	Aux.js
		➡️ const aux = props => props.children;
		➡️ export default aux;
		--------------- App.js
		➡️ ...
		➡️ import withClass from '../hoc/withClass';  //its a regular function, that's why you use "with" instead of "With"
		➡️ import Aux from '../hoc/Aux';
		➡️ return (
			      <Aux>
					<p>Sergio</p>
					<p>Lopez </p>
				</Aux>
			);
		➡️ ...
		➡️ export default withClass(App, classes.App);

	WHICH APPROACH SHOULD YOU USE? It depends
	If it's a High Order Component that add some behind the scenes logic, some JS code that handles errors or sends analytics data
	or anything like that, such HOC maybe should be used or should be written in the last style (Component function inside regular 
	function), to really make it clear that they're NOT SO MUCH INVOLVED IN THE JSX CODE that gets rendered but in the logic that runs.

⭐️ PROPTYPES FOR VALIDATION
	➡️ npm install --save prop-types
	- Improve the way we set up props.
	- Provide some instructions on which props these components accepts, and type of prop (int, string)
	- More clear about which props your component uses
	- Thow an error or a warning if you try to passing incorrect props.
	- Works on functional and class-based components

	➡️ import PropTypes from 'prop-types';
	➡️ ...
	➡️ Person.propTypes = {						//Después del componente va el propType.
			  click: PropTypes.func,
			  name: PropTypes.string.isRequired	//Si no se pasas el name, obtendrás un error.
			  age: PropTypes.number,
		};

⭐️ PASSING UNKNOWN PROPS (...)
	- In the Component function inside Regular function de arriba, faltó añadir los props del Componente, solo esta el estilo. Entonces
	   para pasar el resto de props:
		➡️ const withClass = (WrappedComponent, className) => {
				  return props => (
				 	   <div className={className}>
						      <WrappedComponent {...props}/>	//SPREAD OPERATOR..
					    </div>
				  ); 
			};

⭐️ IMPORTING IMAGES
	➡️ import burgerLogo from '../../assets/images/burger-logo.png'
		...
	➡️ <img src={burgerLogo}/>	//this will refer to a string in the end to the path where webpack stored the optimized image.

⭐️ SETTING STYLE THROUGH PROPS
	➡️...
		<Logo height="80%"/>													//X.js
		-----------------------------	
		<div className={classes.Logo} style={{height: props.height}}>		//Logo.js

✡️ .defaultProps
	Cuando el componente no recibe los props, se asignan unos por default.
		➡️ Component.defaultProps = { title: "Default title" }

⭐️ REACT ICONS
	➡️ npm i react-icons	//console
	------------
	➡️ import { FaTimes } from 'react-icons/fa'
	...
	return(
		...
		<FaTimes/>
	)

⭐️ INCORPORATING CSS CHAIN SELECTORS IN REACT RENDERING CONDITIONS:
	➡️ .task {
			background: #f4f4f4;
		}

		.task.reminder {
			border-left: 5px solid green;
		}
	------------
	➡️ <div 
			className={`task ${task.reminder ? "reminder" : null}`}
		>
		...

⭐️ REACT.MEMO()
	ONLY RE-RENDERS when the PROPS that depends on CHANGED, and not always when the PARENT component changed.
	➡️ const IngredientForm = React.memo(props => {
		...
	
	Similar to shouldComponentUpdate.

	PREVENTS UNNECESSARY RE-RENDERING.
		➡️ ...
		       export default React.memo(Cockpit);
	Store a snapshot of this component and  it will re-render it only if ITS INPUT CHANGES.

	Is it a good idea to optimize every class component (shouldComponentUpdate) and every functional (react.memo(...) )?
	No.
	If you are pretty sure that in all or almost all cases where your parent updates, you will need to update too, then you should 
	not add shouldComponentUpdate or React memo because you will just execute some extra logic and just slows down
	the application a tiny bit.
	 
⭐️ PASS REACT APP TO PRODUCTION (BUILD FOLDER)
	➡️ npm run build	//console, create build folder
	➡️ sudo npm i -g serve
	➡️ serve -s build -p 8000	//production build of react

⭐️ CUANDO QUIERAS GENERAR UN RANDOM ID PARA KEY PROPERTY
	➡️ key= { Math.random().toString() }

⭐️ PROPS DESTRUCTURING
	Remember that props a
	➡️ <Greet name="Diana" heroName="Wonder Woman" />

	Instead of doing this:
	➡️ const Greet = props => {
			...
			<h1> Hello {props.name} aka {props.heroName} </h1>			
		}

	WE DO THIS:
	➡️ const Greet = ({name, heroName}) => {		//you are basically extracting those props from the props Object
			...
			<h1> Hello {name} aka {heroName} </h1>			
		}

	O puede ser así:
		➡️ const { changeName  } = props		//you specify the names of the keys from the object props.

⭐️ SETSTATE & STATE UPDATE BATCHING
	BATCH = Agrupar
	React has a mechanism for batching multiple updates together to AVOID UNNECESSARY RENDER CYCLES..
	
	➡️ setNewSet(oldState + 1)	OR		setNewSet(prevState => prevState + 1)
	Right in the next line after calling setNewSet YOU CAN'T INMEDIATLY USE THE NEW STATE because React won't go ahead and...
	update the state and skip all other code, instead will EXECUTE ALL THE OTHER CODE in the same function and BATCH ALL
	STATE UPDATES TOGETHER.

	ALL STATE UPDATES FROM ONE AND THE SAME SYNCHRONOUS EVENT HANDLER ARE BATCHED TOGETHER!

	setState(...)				//Este state update NO CAUSA UN RE-RENDER CYCLE
	setAnotherState(...)		//Este state update tampoco causa un re-render entero del componente

	Entonces no se ejecutará dos render cycles, SOLO SERÁ UN RENDER CYCLE EL CUAL ACTUALIZARÁ AMBOS STATES.
	It's the same SYNCRONOUS execution cycle.

	Consider this code:
		➡️ console.log(name); // prints name state, e.g. 'Manu'
		➡️ setName('Max');
		➡️ console.log(name); // ??? what gets printed? 'Max'?

	You could think that accessing the name state after setName('Max'); should yield the new value (e.g. 'Max') but this is NOT the case. 
	Keep in mind, that the new state value is ONLY AVAILABLE IN THE NEXT COMPONENT RENDER cycle (which gets scheduled by calling 
	setName()).

	Both concepts (batching and when new state is available) behave in the same way for both functional components with hooks as well 
	as class-based components with this.setState()!

	BUT
	if the state changes are triggered asynchronously (e.g. wrapped in a promise), they will not be batched; if they are triggered directly, 
	they will be batched.

⭐️ THE RECONCILIATION PROCESS
	It's a series of steps to calculate the next state of the whole tree when it updates. First it check the differences in the node that
	changed. Then it iterates over each child and checks recursively their changes.

	If only the props changes, the children remain and will be recursively updated.
	Aqui aplica el key keyword concept.

⭐️ IMPORTING NAMED EXPORTS AS DEFAULT EXPORTS
	➡️ export const NamedExport = () => {...}		//no tiene "default"
	--------------
	➡️ 	import { NamedExport } from '...'			//se soluciona encerrando en curlybraces { }

