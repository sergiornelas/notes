UseState es asíncrono!
	¿Si sientes como cuando llama a useState, los cambios parecen estar un paso atrás?
	En ese caso debes utilizar useEffect.

Cuando utilizas un setState dentro de un useEffect, no invoques en la dependencia el state perteneciente a ese setState
porque eso ocasiona un infinite loop:

	❌️ useEffect(() => {
			setTotal(prevValue => prevValue + total)
		}, [setTotal, total])	// ... [total])   <-  También realiza infinite loop.

		El useEffect se ejecutará cada vez que algún dato de la dependencia se actualice. El setTotal se encarga de actualizar el total
		y al estar total dentro de las dependencias [ ] se ejecutará de nuevo el useEffect, lo que ejecutará el useEffect nuevamente.
		Entonces otra vez ejecuta el setTotal, actualizando nuevamente el total, ocasionando que se vuelva infinite loop...

	✔️ useEffect(() => {
			setTotal(prevValue => prevValue + total)
		}, [setTotal])

What does useEffect do? 
	By using this Hook, you tell React that your component needs to do something after EVERY render 
	(after the first render and after every update).

SE PUEDE AGREGAR FUNCIONES, OBJETOS SIMPLES EN EL DEPENDENCY ARRAY?
	Si!, pero hay que agregar esos dentro de states nuevos.
	➡️ const [videos, setVideos] = useState({...});
	...
	➡️ ...
		,[ videos ]);

COMPONENT CLEANUP
	Whenever the component unmounts, the return function will execute:
	useEffect(() => {
		...
		return () => {
			console.log("unmount");
		}
		...

props vs state
If a Component needs to alter one of its attributes at some point in time, that attribute should be part of its state, otherwise it should just be a prop for that Component.
