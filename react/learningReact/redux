REDUX
Flux state management library.
A state management system for cross-component or app-wide state
	Types of state
	Local state:
		State which belongs to a single component
		E.g user input in a input field.
		Managed by useState(), useReducer()
		
	Cross-component state
		State that affects multiple components.
		E.g open/closed state of a modal overlay.
		Managed by useState(), useReducer() and "props chains" (bad idea) ❌️
		Managed by React Context or Redux (good idea) ✅️
		
	App-wide State
		State that affects the entire app (most/all components).
		E.g user authentication
		Managed by useState(), useReducer() and "props chains" (bad idea) ❌️
		Managed by React Context or Redux (good idea) ✅️
	
	REACT CONTEXT VS REDUX
		POTENTIAL disadvantages in React Context:
			- You can have a very complex setup and managing state with React Context can
			become quite complex (in large aplications). A lot of deeply nested JSX Providers.
			- Performance. React context is great for low-frequency updates (states that doesn't
			update alot like auth or theme). But not great if your data changes a lot.

CORE REDUX CONCEPTS
		REDUCER FUNCTION => MUTATES
			We use REDUCERS functions that are responsible for mutating the store data (state).
			The concept it is very similar to reduce() function: [1,2,3] => [6].
		
		ONE CENTRAL DATA (STATE) STORE IN YOUR APPLICATION
		
		COMPONENTS => SUSCRIPTION
			Components NEVER directly manipulate the store data.
		
		ACTION => DISPATCH
			Components trigger certain actions. It is a simple JS object which describes the kind
			of operation the reducers should perform. Then Redux forwards actions to the reducer

		COMPONENTS DISPATCH ACTIONS which describe what should be done but do not do it directly, 
		then these actions are forwarded to the REDUCER which does what action wants, and then
		the REDUCER spits out a new state which effectively will replace the existing state in 
		CENTRAL DATA STORE. When the state in the data store is updated, SUSCRIBED COMPONENTS are
		notified so they can update their UI.
		
INSTALL REDUX
	>> npm install redux react-redux

	Providing global state.
	at index.js
		import { Provider } from "react-redux";
		import store from './store/index'	//store data

		ReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById("root"));

REDUX HOOKS
	🔯️ useSelector ✅️
		import { useSelector } from 'react-redux';
											
		More convenient to use because allows us to select a PART of the state managed by the
		store.
		
		Using useSelector, React Redux will automatically set up a subscription to the Redux
		store for the component!
		So your component will be updated and will receive the latest counter automatically
		whenever that data changes.

	🔯️ useStore ❌️
		import { useStore } from 'react-redux';
		Get access to the store.	

	🔯️ useDispatch
		import { useDispatch } from 'react-redux';
		const dispatch = useDispatch();
	
		Hook that access the redux dispatch function, which we use to dispatch actions.

	connect (class-based)
		Redux on Class-based components.
		import { connect } from 'react-redux';
		...
		
		const mapStateToProps = state => {
		  return {
		    counter: state.counter
		  };
		}

		const mapDispatchToProps = dispatch => {
		  return {
		    increment: () => dispatch({ type: 'increment' }),
		    decrement: () => dispatch({ type: 'increment' }),
		  }
		}

		export default connect(mapStateToProps, mapDispatchToProps)(Component);
		
		It is a high order component. Manage a subscription for you.

ATTACHING PAYLOADS TO ACTIONS
DISPATCHING EXTRA VALUE (powerfull flexibility)
	const increaseHandler = () => {
		dispatch({ type: 'increase', amount: 5 })
		//In dispatch you add extra property: amount
	}

	reducerFunction = (..., action) => {		
		if (action.type === 'increase'){
		    return {
		    							//you can pick up the amount property from action obj.
			 counter: state.counter + action.amount
		    }
		}
	}
	
❌️ In Redux, YOU SHOULD NEVER MUTATE THE STATE.
	Never change the original state which you are getting, this can lead to bugs.

	...
	if (action.type === 'increment'){
		state.counter++; ❌️
		return state;
	}
	Instead always override it by returning a new state object ✅️

REDUX TOOLKIT
	It was mainly created to solve the THREE MAJOR ISSUES with Redux:
		- Configuring a Redux store is too complicated.
		- Have to add a lot of packages to build a large scale application.
		- Redux requires too much boilerplate code which makes it cumbersome to write efficient and 
		  clean code.

	With Redux Toolkit you can update the original state:
		state.counter++; ✅️
	
		Internally ensures NOT manipulate the existing state, instead transforms
		it into a operation which updates the state in an immutable way.

	>> npm install @reduxjs/toolkit
	you can uninstall redux (it is already included on @reduxjs/toolkit
	
CREATING REDUX STATE STEP BY STEP
	>> npm install react-redux @reduxjs/toolkit

	At index.js ----------------------------------------------------------
	1) CREATE STORE PROVIDER
		import { Provider } from "react-redux";
		import store from './store/index'	//CHECK STEP #5
		...
		<Provider store={store}>
			<App />
		</Provider>,
		.../

	At counter.js --------------------------------------------------------
	2) IMPORT CREATESLICE
		import { createSlice } from "@reduxjs/toolkit";

	3) CREATE INITIAL STATE
		const initialCounterState = { counter: 0, showCounter: true };

	4) CREATE SLICE (IT HAS INITIAL STATE AND REDUCERS)
        	//Prepares a slice of global state
		const counterSlice = createSlice({
			name: "value",
			initialState: initialCounterState,
			reducers: {
				increment(state) {
				 state.counter++;
				},
				//payload
				increase(state, action) {
								//You must use 'payload' reserved keyword.
					state.counter = state.counter + action.payload;
				}
			},
		});
		
		//Reducers must be PURE, SIDE-EFFECT FREE, SYNCHRONOUS functions.
		
		createSlice has two important properties:
		'actions' for refer to the reducers and using them in dispatch functions. 	//CHECK NEXT STEP
		'reducer' for store the actionsMap into store. 						//CHECK NEXT STEP
		
	5) EXPORT SLICE REDUCER ACTIONS AND SLICE ACTIONSMAP.
		export const counterActions = counterSlice.actions; //CHECK STEP 10
		export default counterSlice.reducer;	//CHECK STEP 7

	At storeStates.js -----------------------------------------------------
	6) IMPORT CONFIGURESTORE
		import { configureStore } from "@reduxjs/toolkit";
		//Creates a store, but it makes merging multiple reducers into one reducer easier.
		//Merge all reducers into one big reducer.
		
	7) IMPORT REDUCERS FROM counter.js
		import counterReducer from './counter' //refers to the 2nd export from step #5
	
	8) CREATE CONFIGURE STORE AND ADD THE REDUCER/REDUCERS TO IT.
		const store = configureStore({
			reducer: {
				counter: counterReducer,
				// ... multiple reducers if it is necessary.
			},
		});
	
	9) EXPORT STORE
		export default store;
		
	At Component.js
	10) IMPORT USEDISPATCH, USESELECTOR AND ACTIONS
		import { useDispatch, useSelector } from 'react-redux';
		import { counterActions } from '../store/index' //refers to the 1st export from step #5
	
	11) CREATE USEDISPATCH AND USESELECTOR VARIABLES
		const dispatch = useDispatch();
		const counter = useSelector(state => state.counter.counter);
	
	12) CREATE FUNCTIONS THAT DISPATCH THE REDUCER ACTIONS
		const incrementHandler = () => {
			dispatch(counterActions.increment());
		};

		const increaseHandler = () => {
			dispatch(counterActions.increase(10))
				// returns this:
				// { type: SOME_UNIQUE_IDENTIFIER, payload: 10}
		}
	
	13) ENJOY!, YOU CAN MANAGE THE REDUCER ACTIONS ON JSX LIKE A ROCKSTAR.
		return(
			<div>
				<p>{counter}<p>
				<button onClick={incrementHandler}>Increment</button>
				<button onClick={increaseHandler}>Increase by 10</button>
			...
		)

HANDLING SIDE EFFECTS IN REDUX
	If Reducers must be PURE, SIDE-EFFECT FREE, SYNCHRONOUS functions, where I handle side effects?
	1) Inside the COMPONENTS (e.g. useEffect())
		Then we only dispatch an action once that side effect is done.
	2) Inside the ACTION CREATORS.

