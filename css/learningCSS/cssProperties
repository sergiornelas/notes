=======================================================================================================================
																		CSS PROPERTIES
=======================================================================================================================

================================================BACKGROUND PROPERTIES================================================

background	//El fondo del tag.
	-clip:	//Habilita definir si el fondo se extiende por debajo de un borde potencial, o no. No depende de una imagen.
			//Importante para bordes en puntos, donde puedes ver contenido debajo de ese borde punteado.

		border-box;	//La imagen ahora se ve por debajo del border punteado (border: dashed black;)

		padding-box;	//El borde ahora no esta por encima de la imagen.

		content-box; //Acorta el contenido o la imagen antes del padding del border (se ve espacio en blanco alrededor).

	-color:	//Color del fondo. No depende de una imagen. Solo puedes agregar un solo color.

	-image:	//Para ingresar una o varias imágenes de fondo.

		url("image.jpg") //Agrega imagen de fondo.

		linear-gradient(); //Estos fondos de colores difuminados también son tratados como imágenes.

		radial-gradient(); //Fondo de color difuminado ahora radial.

	-----------SOLO APLICAN UNA VEZ HAYAS PUESTO IMAGEN: --------------------------------------------
	-attachment: //Rara vez se usa. Habilita la conducta del scroll de la imagen de fondo. Solo aplica una vez hayas puesto img.

		scroll;	//La imagen se mantiene en su lugar y el contenido se scrolleará.

		fixed;	//La imagen no se corregirá al contendor, sino al viewport.

	-origin:	//Habilita gestionar el área de fondo de la imagen de fondo. Solo aplica una vez hayas puesto img.

		border-box;	//La imagen ahora se ve por debajo del border punteado (border: dashed black;)

		content-box;	//El contenedor ahora solo abarca la imagen sin los bordes y padding (se ven espacios blancos a los lados).

		padding-box;	//El contenedor incluye padding, pero no el borde.

	-position://Mueve la posición de la imagen. El primer valor define x-axis y el segundo y-axis. Solo aplica una vez hayas puesto img.
				//Si utilizas un valor en porcentaje %, definirá cómo se distribuyen las partes de la imagen que no caben en el contenedor.
				//Si utilizas dos valores en porcentaje %,el segundo define qué porcentaje del espacio excedido debe ir hacia arriba.
				//El valor default es 50%. La parte que excede el contenedor de la imagen, 50% se cortará arriba y 50% abajo.
				//Si utilizas 0% 100%, todo lo que sobra de la imagen se cortará desde arriba y nada cortará abajo.

		center;   //Es lo mismo que poner 50% 50% (se cortará la mitad de lo que sobra de la imagen arriba y abajo).

		left top; //No corta lo que sobra de la imagen en el lado izquierdo y la parte superior de la imagen se alinea al contenedor.
				    //Es lo mismo que 0% 0%

		left 10% bottom 20%; //Lo que sobra de la imagen, en la izquierda corta 10%, en la parte inferior corta 20%.

		top right; //(w3schools), image in the top right corner.

	-repeat:	//Gestiona si una imagen se repite como mosaico o no: no-repeat;

		repeat-x;	//Solo aparece en x-axis (fila horizontal).

	-size://Una vez establecida la imagen, aqui se modifica el tamaño de la imagen.
			//Si la imagen es más pequeña que el espacio entonces la imagen aparecerá multiples veces (mosaico) hasta cubrir todo.

		300px 100px;	//Tomará x-axis y y-axis.

		auto 100%;	//Puedes utilizar auto para que la imagen aparezca en su tamaño natural.

		cover;			//Se asegura de cubrir todo el contenedor, aunque corta la imagen.

		contain;		//Se asegura que la imagen completa es visible, pero no se asegura que el contenedor sea cubrido.


==============================================NORMAL PROPERTIES======================================================

clear:			//Indicates which sides of an element's box(es) may not be adjacent to an earlier floating box.
	both			//Clear left and right floats.

color:			//El color del texto.

cursor:			//Agrega propiedades al colocar el cursor sobre el tag.
	pointer		//El cursor muestra la manita, enfatizando que es clickeable el tag.

display:			//Forma en que aparecerá el tag en la página. Nos permite cambiar la conducta default que tienen los tags.
	block			//Convierte un inline tag a block tag.

	none			//No se muestra el tag en la página (se descarta en el document flow). Util para conjugarlo con JS.

	inline-block	//Mixes the behaviour of both inline and block level tags:
					//Tags go inline (next to each other) but they still behave like block level tags when it comes setting margins, paddings...
					//It is similar to the inline element and follows the page flow. The only difference is that it will consider height and width.

filter:			//Allows to change the visual appearance of an element by applying a filter.
	blur(10px);	//Hace que el tag se vea borroso.

	grayscale(40%)	//Porcentage what defines how much you want to turn it to grey.

float:			//Overwrite the default positioning and tell the browser to push an element to the left or the right of the page.
	right			//Moves element to the right, take out of the document flow. No funciona con flex-level boxes.

font				//La fuente del texto.
	-display		//Gestiona el rendimiento cuando la fuente deseada tarda en cargar. No tiene mucha compatibilidad con varios browsers.
		
	-family		//Selecciona la fuente desada del texto.
					//Si colocas varias fuentes, localiza la primera, si no la encuentra la siguiente... 
					//hasta seleccionar la genérica proporcionada por el navegador (fallback font).

	-inherit		//Aplica los valores heredados. En lugar de usar browser default fonts utiliza los que agregamos en nuestra página.

	-size			//Tamaño de la letra.

	-variant:		//Cambios especiales a la fuente.

		small-caps// Convierte todo el texto a mayúscula, pero conservando la altura de los carácteres en minúscula.

	-weight		//El grosor de la letra. Lo normal es 400.

font:	//Se refiere a la fuente que estas utilizando en tu sistema operativo.
	menu	//La fuente que utiliza tu SO en el menu.

letter-spacing:	//Agrega espaciado entre los carácteres.

line-height:	//Establece la distancia vertical que tienen dos lineas entre sí (interlineado). No considera los decimales.
				//El valor cambia según el font-family que se está usando.
	2	//El doble respecto al font-size.

list-style:		//Pivotes de una lista.
	 none			//Sin pivotes en cada elemento de la lista.

max-width:	//Define un valor máximo para el ancho. Siempre usalo en combinación con { width : x } para que funcione.

min-width:	//Define un valor mínimo que puede alcanzar el ancho de un elemento. Antes tiene que haber { width : x } declarado.

outline:		//Un borde superficial alrededor del tag (no se refiere al border del box, este es uno con valores distintos).
				//Comes after the border, so you can have both. No counts in box-size
			
text
	-align:			//Para alinear el texto de un tag a tu gusto.

	-decoration:	//Modifica cierta decoración al texto (tachado, subrayado...). none para quitar el subrayado de anchor tag.

	-indent:		//Agrega una tabulación al principio de la linea, como se aprecia en los libros. Puedes usar px.

	-shadow:		//Sombreado del texto. (1px 1px 2px black -> offset-x | offset-y | blur-radius | color).

	-transform:	//Convertir el texto seleccionado.

		uppercase	//A mayúsculas.

		capitalize	//inicial con mayúscula ().

vertical-align:	//Alinear contenido de un tag con otro tag. (Hay que agregar esta regla en ambos tag para que se igualen verticalmente).
					//Util para cuando quieras cubrir pequeños espacios en blanco.
	middle		//Se alinea enmedio.

visibility:			//Visibilidad del tag.
	hidden		//Tag is invisible, but it's not removed from document flow (a diferencia de display: none).

white-space:		//Impacta la manera en que los espacios en blanco son tratados dentro del elemento.
	nowrap		//Todo el texto se mostrará en una sola linea, sin importar los break lines.
	pre			//Respeta los break line encontrados en el html file.
	pre-wrap		//Lo mismo que el anterior, pero no sobrepasa el canvas (no scroll left-right bar).


==============================================BOX MODEL PROPERTIES===================================================

This properties can't be assigned on inline tags

border:			//Borde del tag.
	-bottom/...	//Añade estilo a lados especificos.

	-color			//Color del borde.

	-radius		//Redondea las esquinas. Si pones 50% se crea un círculo perfecto.

	-style			//Estilo del borde (dashed, solid).

	-width		//Anchura del borde.

	none			//La unica forma de quitar los bordes de los input

box-shadow:		//Añade sombra al tag
	2px 3px 1px 3px green
					//2px para X-axis, 3px para Y-axis, 1px para borrosidad, 3px para repartir sombra más allá de los bordes, color verde.

	inset			//Se agrega sombra al interior del tag. Da un aspecto de profundidad.

box-sizing:		//Gestiona si el comportamiento de un box si permite sobrepasar el canvas (content), o se ajusta a él (border).
	content-box	//Comportamiento por defecto. El contenido mismo del elemento.

	border-box	//La caja del tag. El estilo afecta a la caja entera del tag, no solo el contenido de la caja:
					//(Incluye el padding y border, y no incluye el margin).

height:			//Altura del tag (afecta el contenido dentro del tag, no el box).

margin:			//Separación afuera del tag.
	auto				//Will automatically fill the available space to the left and right equally to center the element.
						//Solo funciona horizontalmente en block level elements con un width asignado explicitamente.

padding:			//Espacio entre el contenido interno y el borde del tag.

width:				//Anchura del tag (afecta el contenido dentro del tag, no el box).
	30%				//El ancho del tag será de 30% respecto al total del tag padre inmediato.


=================================================PSEUDO CLASSES=======================================================

:active			//Cuando el tag recibe alguna acción concreta (click, enter...).

:focus			//Está preparado para recibir acciones al haber dado click o seleccionar usando tabulación.

:hover			//Al colocar el cursor en el tag, realiza alguna acción.

:invalid		//Se activa cuando el input no corresponde con el value del input tag (input type="email" le falta el arroba)

:last-of-type	//Selecciona el último tag de ese tipo en la página.

:not(element)//Selects all elements that DOESN'T have the argument inside parenthesis.

:valid			//Lo opuesto a invalid.


=================================================PSEUDO ELEMENTS=====================================================

::after			//Insert some text after the content of each element:
	{content}		//Content that will be added. Por ejemplo: {content: "Sergio;"}

::before		//Insert some text before the content of each element:
	{content}		//Content that will be added. Por ejemplo: {content: "Sergio;"}

::first-letter	//Al primer carácter del tag, realiza alguna acción.


================================================POSITIONING ELEMENTS==================================================

position:			//Cambiar el posicionamiento de un elemento (X, Y y Z). Funciona igual tanto con inline elements como block elements.

1	static			//Default value. Sigue el document flow. El elemento respeta su posición respecto del elemento padre y sus hermanos 
        (Default)		//que determina el orden en el que se imprime en la pantalla.

2	relative		//Libera al elemento de su POSICIÓN ORIGINAL y combinado con top, bottom, left y right, nos permite desplazarlo 
  (Element itself)	//respecto a ella. La posición del resto de elementos no es afectada.
					//<Keeps the element in the document flow>

3	absolute		//Igual que relative, pero los atributos top/bottom/left/right lo posicionarán respecto del PRIMER ELEMENTO PADRE con 
  (Another elem.)	//un valor de position DIFERENTE a static o initial, o en caso de no existir se posicionará respecto al elemento HTML.
  (or HTML elem.)	//El espacio liberado pasa a ser ocupado por el resto de elementos hermanos.
					//La anchura y altura del tag que tenga esta declaración se encogerá hasta cubrir solo el contenido.
					//<Take the element out of the document flow>

4	fixed			//Idéntico a absolute excepto que el elemento se posiciona siempre respecto del :ROOT, por lo que no es afectado por 
      (Viewport)		//ningún scroll, ni siquiera el del documento. Bueno para NAV BAR.
					//Si varios elementos hermanos tienen fixed, la aparición de éstos se definirá conforme al orden que fueron declarados
					//en HTML.
					//<Take the element out of the document flow>

	sticky			//Combinación de relative y fixed. Bajas el scroll y el elemento se queda arriba. Necesita de un top/right declaración.
  (Viewport and	//The element stops being fixed as soon as it reaches the end of its parent element.
  another elem.)

overflow:			//Acciones que tomar cuando los hijos del elemento se desbordan del canvas.
	auto			//Similar to scroll, but it adds scrollbars only when necessary.
	
	hidden		//It will hide part of the element that it's outside of the parent. Si esta completamente desbordado pues no aparecerá.
					//Si el parent es body, entonces debes poner la regla overflow: hidden; en html { } y body { }.
	
	scroll			//Si se desborda el elemento aparecerá scroll bar.

top/right... :		//Necesita position: no static para aplicar. Agrega margen-espacio utilizando la propiedad deseada.

z-index:			//Necesita position: no static para aplicar. Move an element above or below every element on the page.
					//Útil cuando existen varios elementos hermanos utilizando position: diferente de static.
					//El elemento no puede ser movido below or above del parent element en el que se encuentra (stacking context).
					//Applying the z-index  to flex-items (so the elements inside of the flex-container) will change the order of these items 
					    even if no position  property was applied.

	auto			//Valor por default que tiene cada el elemento en el website, equivale a 0.

	-1				//El elemento se coloca por debajo del resto de elementos. Útil para background images. Puedes cambiar el número.


=====================================================FLEX BOX==========================================================

Parent (Flex Container)
	display:
		flex				//Se crea un container. Se aplica en automático:
							//	flex-direction: row; flex-wrap: nowrap;

		inline-flex		//Igual que flex, solo que aplica en automático: flex-wrap: wrap;

	flex-direction:		//La dirección en la que va el flex container.
		row					//Los hijos del container se vuelven inline elements y los ordena de izquierda a derecha.
								//La altura del container lo declarará el elemento hijo que tenga mayor altura, y todos los hijos utilizarán
								//esa misma altura y estan alineados en la parte superior.

		row-reverse			// Lo mismo que row solo que invierta los hijos y los ordena de derecha a izquierda (aplica espejo).

		column				//Los hijos se comportan como simples block level elements (abarcan todo el div). En responsividad los hijos
								//que tengan establecido un ancho, mantendrán ese ancho aún así sobrepasen el canvas.

		column-reverse		//Lo mismo que column solo que aplica espejo a los hijos.

	flex-wrap:			//Decidir si el flex container se adapta o no a sus hijos.
		nowrap				//El container abarca todo el elemento. Responsibidad: Los children se adaptan al container, y cuando éste 
								// sobrepasa las medidas de los children, ellos sobrepasan el container.

		wrap					//El container se adapta a su contenido (los hijos). Los hijos no sobrepasan el container. Pasan a la siguiente fila.

		wrap-reverse		//Cuando exista responsividad, invierte el orden de los hijos. Los hjjos estarán alineados en la parte inferior.

	flex-flow:				//Flex shorthand
		flex-flow: row wrap;	-> flex-direction: row; flex-wrap: wrap;

	align-items:			//Utiliza el Cross axis para manipular los hijos.
		stretch				//Default. Todos los hijos comparten la misma altura: La mayor altura definida por alguno de los hijos.
		center				// Los hijos estarán centrados respecto al Cross axis.
		flex-start				// Los hijos estarán al comienzo del Cross axis.
		flex-end				// Los hijos estarán al final del Cross axis.
		baseline				// Alinea los hijos en función a su contenido.
		
	justify-content:		//Utiliza el Main axis para manipular los hijos. It helps distribute extra free space leftover
		center				//Centra los hijos respecto al Main axis.
		flex-end				//Los hijos estarán al final del Main axis.
		space-between		//Los hijos que intenten sobrepasar el contenedor se dirigirán hasta el final del Main axis.
		space-around		//Items are evenly distributed in the line with equal space around them.

	align-content:		//Alinea los hijos a lo largo del Cross axis.
		center				//Concentra los hijos en el centro del contenedor.
		flex-start				//Concentra los hjijos al comienzo del Cross axis.
		space-between		//Los hijos que intenten sobrepasar el contenedor se dirigirán hasta el final del Cross axis.

Children (Flex Items)
	order:					//Define el lugar en donde se encontrará ese hijo respecto a sus hermanos (main axis).
							//Los números representan prioridad (similar a z-index).
		0						//Default
		1						//El hijo se posicionará hasta el final.
		-1						//Se va al principio.

	align-self:				//Un hijo se vuelve punk y establece su propio Cross-axis.
		flex-start...

	flex-grow:			//Define que hijos se adaptarán al container (responsividad), cuáles se alargarán y cuáles no. (con nowrap).
							//Si utilizamos flex-wrap: wrap, los hijos que sobrepasen el cont. pasarána una siguiente linea. Si un solo hijo
							//esta en esa nueva linea, abarcará todo el container puesto que flex-grow se encarga de eso.
		0						//Default
		1						// Si un hijo tiene 0 y otro 1, el que tiene 1 es el que se alargará para cubrir el container, el que tiene 0 no.
		4						// Si un hijo tiene 1 y otro 4, el que tiene 4 llenará el 80% del espacio restante, el 1 llenará 20% (relación 1:4).
							
	flex-shrink			//Define la conducta cuando el hijo decrementa su width/height
		1						//Default
		0						//El hijo que contiene el mayor flex-shrink será el que se comprima.
		4						//Si un hijo contiene 1 y el otro 4, el que tiene 4 se comprimirá cuatro veces más que el otro (ratio 4:1).
	
	flex-basis				//Define el tamaño de un elemento dependiendo del Main-axis.
							//Cuando un hijo crece o se comprime, con esto definimos un tamaño que no rebasará.
		auto					//Default. Buscará el valor ya definido previamente (como fallback) (width, height).

